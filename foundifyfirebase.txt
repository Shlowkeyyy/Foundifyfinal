// server.js - Node.js + Firebase Backend for Foundify
const express = require("express");
const cors = require("cors");
const admin = require("firebase-admin");
require("dotenv").config();

// Initialize Firebase Admin SDK
const serviceAccount = require("./firebaseConfig.json"); // Download from Firebase Console
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const db = admin.firestore();
const app = express();
app.use(express.json());
app.use(cors());

// ðŸš€ User Signup API
app.post("/signup", async (req, res) => {
  const { email, password, fullName, phone } = req.body;
  try {
    const userRecord = await admin.auth().createUser({
      email,
      password,
    });

    // Store user data in Firestore
    await db.collection("users").doc(userRecord.uid).set({
      fullName,
      email,
      phone,
      createdAt: new Date(),
    });

    res.status(201).json({ message: "User created successfully", uid: userRecord.uid });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// ðŸš€ User Login API
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await admin.auth().getUserByEmail(email);
    res.status(200).json({ message: "Login successful", uid: user.uid });
  } catch (error) {
    res.status(400).json({ error: "Invalid credentials" });
  }
});

// ðŸš€ Store Lost Item Report
app.post("/lost-item", async (req, res) => {
  const { uid, itemName, description, location, date, contact } = req.body;
  try {
    await db.collection("lost_items").add({
      uid,
      itemName,
      description,
      location,
      date,
      contact,
      status: "Lost",
      createdAt: new Date(),
    });
    res.status(201).json({ message: "Lost item reported successfully" });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// ðŸš€ Get All Lost Items
app.get("/lost-items", async (req, res) => {
  try {
    const snapshot = await db.collection("lost_items").get();
    const items = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    res.status(200).json(items);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
